//
// EBNF to generate railroad diagram at https://www.bottlecaps.de/rr/ui
//
//
// From https://raw.githubusercontent.com/vlang/v-analyzer/main/tree_sitter_v/src/grammar.json
//

source_file ::=
	 shebang? module_clause? import_list? ( _top_level_declaration ( terminator )? | _statement terminator? )*

shebang ::=
	 '#' '!' [^\r\n]+

terminator ::= '\n' | '\r' | '\r\n'

comment ::=
    '/' '/' [^\n\r]* 
    | '/' '*' ( [^\/][^\*]+ '/' '*'+ [^\/][^\*]+ )+ ( [^\*][^\/] + '*'+ '/' [^\*][^\/]+ )+ 
    | '/' '*' [^\*]* '*' '/'

module_clause ::=
	 attributes? 'module' identifier

import_list ::=
	 import_declaration+

import_declaration ::=
	 'import' import_spec ( terminator | ';' )

import_spec ::=
	 import_path import_alias? selective_import_list?

import_path ::=
	 import_name ( '.' import_name )*

import_name ::=
	 identifier

import_alias ::=
	 'as' import_name

selective_import_list ::=
	 '{' reference_expression ( ( ',' | terminator ) reference_expression? )* '}'

_top_level_declaration ::=
    const_declaration
	| global_var_declaration
	| type_declaration
	| function_declaration
	| static_method_declaration
	| struct_declaration
	| enum_declaration
	| interface_declaration

const_declaration ::=
	 attributes? visibility_modifiers? 'const' ( const_definition | '(' ( const_definition ( terminator | ';' ) )* ')' )

const_definition ::=
	 identifier '=' _expression

global_var_declaration ::=
	 attributes? '__global' ( global_var_definition | '(' ( global_var_definition ( terminator | ';' ) )* ')' )

global_var_definition ::=
	 identifier ( plain_type | _global_var_value )

_global_var_value ::=
	 '=' _expression

type_declaration ::=
	 visibility_modifiers? 'type' identifier generic_parameters? '=' _type_union_list

_type_union_list ::=
	 plain_type ( ( terminator )? '|' plain_type )*

function_declaration ::=
	 attributes? visibility_modifiers? 'fn' receiver? _function_name generic_parameters? signature block?

static_method_declaration ::=
	 attributes? visibility_modifiers? 'fn' static_receiver '.' _function_name generic_parameters? signature block?

static_receiver ::=
	 reference_expression

_function_name ::=
	 identifier
	| overridable_operator

overridable_operator ::=
	 '+'
	| '-'
	| '*'
	| '/'
	| '%'
	| '<'
	| '>'
	| '=='
	| '!='
	| '<='
	| '>='

receiver ::=
	 '(' mutability_modifiers? identifier _plain_type_without_special ')'

signature ::=
	 ( parameter_list | type_parameter_list ) plain_type?

parameter_list ::=
	 '(' ( parameter_declaration ( ',' parameter_declaration )* )? ')'

parameter_declaration ::=
	 mutability_modifiers? identifier '...'? plain_type

type_parameter_list ::=
	 '(' ( type_parameter_declaration ( ',' type_parameter_declaration )* )? ')'

type_parameter_declaration ::=
	 mutability_modifiers? '...'? plain_type

generic_parameters ::=
	 ( '[' | '<' ) generic_parameter ( ',' generic_parameter )* ','? ( ']' | '>' )

generic_parameter ::=
	 identifier

struct_declaration ::=
	 attributes? visibility_modifiers? ( 'struct' | 'union' ) identifier generic_parameters? _struct_body

_struct_body ::=
	 '{' ( struct_field_scope ( terminator )? | struct_field_declaration ( terminator )? )* '}'

struct_field_scope ::=
	 ( 'pub' | 'mut' | 'pub' 'mut' | '__global' ) ':'

struct_field_declaration ::=
	 _struct_field_definition
	| embedded_definition

_struct_field_definition ::=
	 identifier plain_type ( '=' _expression )? attribute?

embedded_definition ::=
	 type_reference_expression
	| qualified_type
	| generic_type

enum_declaration ::=
	 attributes? visibility_modifiers? 'enum' identifier enum_backed_type? _enum_body

enum_backed_type ::=
	 'as' plain_type

_enum_body ::=
	 '{' ( enum_field_definition ( terminator )? )* '}'

enum_field_definition ::=
	 identifier ( '=' _expression )? attribute?

interface_declaration ::=
	 attributes? visibility_modifiers? 'interface' identifier generic_parameters? _interface_body

_interface_body ::=
	 '{' ( struct_field_scope ( terminator )? | struct_field_declaration ( terminator )? | interface_method_definition ( terminator )? )* '}'

interface_method_definition ::=
	 identifier generic_parameters? signature attribute?

_expression ::=
	 _expression_without_blocks
	| _expression_with_blocks

_expression_without_blocks ::=
	 parenthesized_expression
	| go_expression
	| spawn_expression
	| call_expression
	| function_literal
	| reference_expression
	| _max_group
	| array_creation
	| fixed_array_creation
	| unary_expression
	| receive_expression
	| binary_expression
	| is_expression
	| not_is_expression
	| in_expression
	| not_in_expression
	| index_expression
	| slice_expression
	| as_type_cast_expression
	| selector_expression
	| enum_fetch
	| inc_expression
	| dec_expression
	| or_block_expression
	| option_propagation_expression
	| result_propagation_expression

_expression_with_blocks ::=
	 type_initializer
	| anon_struct_value_expression
	| if_expression
	| match_expression
	| select_expression
	| sql_expression
	| lock_expression
	| unsafe_expression
	| compile_time_if_expression
	| map_init_expression

strictly_expression_list ::=
	 ( _expression | mutable_expression ) ',' ( _expression | mutable_expression ) ( ',' ( _expression | mutable_expression ) )*

inc_expression ::=
	 _expression '++'

dec_expression ::=
	 _expression '--'

or_block_expression ::=
	 _expression or_block

option_propagation_expression ::=
	 _expression '?'

result_propagation_expression ::=
	 _expression '!'

anon_struct_value_expression ::=
	 'struct' '{' ( element_list | short_element_list ) '}'

go_expression ::=
	 'go' _expression

spawn_expression ::=
	 'spawn' _expression

parenthesized_expression ::=
	 '(' _expression ')'

call_expression ::=
	 'json.decode' special_argument_list | _expression type_parameters? argument_list

type_parameters ::=
	 '[' plain_type ( ',' plain_type )* ']'

argument_list ::=
	 '(' ( ( argument ) ( ( terminator | ';' | ',' ) ( argument ) )* ( terminator | ';' | ',' )? )? ')'

argument ::=
	 _expression
	| mutable_expression
	| keyed_element
	| spread_expression

special_argument_list ::=
	 '(' _plain_type_without_special ( ',' _expression )? ')'

type_initializer ::=
	 plain_type type_initializer_body

type_initializer_body ::=
	 '{' ( element_list | short_element_list )? '}'

element_list ::=
	 ( ( spread_expression | keyed_element | reference_expression ) ( terminator | ';' | ',' )? )+

short_element_list ::=
	 ( element ( terminator | ';' | ',' )? )+

element ::=
	 _expression

keyed_element ::=
	 field_name ':' _expression

field_name ::=
	 reference_expression

function_literal ::=
	 'fn' capture_list? generic_parameters? signature block

capture_list ::=
	 '[' ( capture ( ',' capture )* )? ','? ']'

capture ::=
	 mutability_modifiers? reference_expression

reference_expression ::=
	 identifier

type_reference_expression ::=
	 identifier

unary_expression ::=
	 ( '+' | '-' | '!' | '~' | '^' | '*' | '&' ) _expression

receive_expression ::=
	 '<-' _expression

binary_expression ::=
	 _expression ( '*' | '/' | '%' | '<<' | '>>' | '>>>' | '&' | '&^' ) _expression
	| _expression ( '+' | '-' | '|' | '^' ) _expression
	| _expression ( '==' | '!=' | '<' | '<=' | '>' | '>=' ) _expression
	| _expression '&&' _expression
	| _expression '||' _expression

as_type_cast_expression ::=
	 _expression 'as' plain_type

compile_time_selector_expression ::=
	 '$' '(' ( reference_expression | selector_expression ) ')'

or_block ::=
	 'or' block

_max_group ::=
	 pseudo_compile_time_identifier | literal

escape_sequence ::=
	 '\' ( 'u'[a-fA-F0-9]'{4}' | 'U'[a-fA-F0-9]'{8}' | 'x'[a-fA-F0-9]'{2}' | [0-9]'{3}' | '#x0D'?'#x0A' | ['"abfrntv$\] | '\S' )

literal ::=
	 int_literal
	| float_literal
	| _string_literal
	| rune_literal
	| none
	| true
	| false
	| nil

none ::=
	 'none'

true ::=
	 'true'

false ::=
	 'false'

nil ::=
	 'nil'

spread_expression ::=
	 '...' _expression

map_init_expression ::=
	 '{' ( map_keyed_element ( terminator | ';' | ',' )? )* '}'

map_keyed_element ::=
	 _expression ':' _expression

array_creation ::=
	 _array

fixed_array_creation ::=
	 _array '!'

_array ::=
	 '[' ( _expression ','? )* ']'

selector_expression ::=
	 _expression ( '.' | '?.' ) ( reference_expression | compile_time_selector_expression )

index_expression ::=
	 _expression ( '[' | '[' | '#[' ) _expression ']'

slice_expression ::=
	 _expression ( '[' | '[' | '#[' ) range ']'

if_expression ::=
	 'if' ( _expression | var_declaration ) block else_branch?

else_branch ::=
	 'else' ( block | if_expression )

compile_time_if_expression ::=
	 '$if' ( _expression '?'? ) block ( '$else' ( block | compile_time_if_expression ) )?

is_expression ::=
	 ( mutability_modifiers? _expression ) 'is' plain_type

not_is_expression ::=
	 ( mutability_modifiers? _expression ) '!is' plain_type

in_expression ::=
	 _expression 'in' _expression

not_in_expression ::=
	 _expression '!in' _expression

enum_fetch ::=
	 '.' reference_expression

match_expression ::=
	 'match' ( _expression | mutable_expression ) '{' match_arms? '}'

match_arms ::=
	 ( match_arm | match_else_arm_clause )+

match_arm ::=
	 match_expression_list block

match_expression_list ::=
	 ( _expression_without_blocks | match_arm_type | _definite_range ) ( ',' ( _expression_without_blocks | match_arm_type | _definite_range ) )*

match_arm_type ::=
	 plain_type

match_else_arm_clause ::=
	 'else' block

select_expression ::=
	 'select' expression_list? '{' select_arm* select_else_arn_clause? '}'

select_arm ::=
	 select_arm_statement block

select_arm_statement ::=
	 select_var_declaration | send_statement | expression_without_blocks_list _select_arm_assignment_statement?

_select_arm_assignment_statement ::=
	 ( '*=' | '/=' | '%=' | '<<=' | '>>=' | '>>>=' | '&=' | '&^=' | '+=' | '-=' | '|=' | '^=' | '=' ) expression_without_blocks_list

select_var_declaration ::=
	 identifier_list ':=' expression_without_blocks_list

select_else_arn_clause ::=
	 'else' block

lock_expression ::=
	 ( 'lock' | 'rlock' ) expression_list? block

unsafe_expression ::=
	 'unsafe' block

sql_expression ::=
	 'sql' identifier? _content_block

int_literal ::=
	 ( '0' ( 'b' | 'B' ) '_'? [01] ( '_'? [01] )* | '0' | [1-9] ( '_'? [0-9] ( '_'? [0-9] )* )? | '0' ( 'o' | 'O' )? '_'? [0-7] ( '_'? [0-7] )* | '0' ( 'x' | 'X' ) '_'? [0-9a-fA-F] ( '_'? [0-9a-fA-F] )* )

float_literal ::=
	 ( [0-9] ( '_'? [0-9] )* '.' [0-9] ( '_'? [0-9] )* ( ( 'e' | 'E' ) ( '+' | '-' )? [0-9] ( '_'? [0-9] )* )? | [0-9] ( '_'? [0-9] )* ( 'e' | 'E' ) ( '+' | '-' )? [0-9] ( '_'? [0-9] )* | '.' [0-9] ( '_'? [0-9] )* ( ( 'e' | 'E' ) ( '+' | '-' )? [0-9] ( '_'? [0-9] )* )? | '0' ( 'x' | 'X' ) ( '_'? [0-9a-fA-F] ( '_'? [0-9a-fA-F] )* '.' ( [0-9a-fA-F] ( '_'? [0-9a-fA-F] )* )? | '_'? [0-9a-fA-F] ( '_'? [0-9a-fA-F] )* | '.' [0-9a-fA-F] ( '_'? [0-9a-fA-F] )* ) ( 'p' | 'P' ) ( '+' | '-' )? [0-9] ( '_'? [0-9] )* )

rune_literal ::=
	 ( '`' ( [^'\] | "'"  | '"'  | '\' ( '0' | '`' | 'x' [0-9a-fA-F] [0-9a-fA-F] | [0-7] [0-7] [0-7] | 'u' [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] | 'U' [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] | ( 'a' | 'b' | 'e' | 'f' | 'n' | 'r' | 't' | 'v' | '\' | "'"  | '"'  ) ) ) '`' )

_string_literal ::=
	 c_string_literal
	| raw_string_literal
	| interpreted_string_literal

c_string_literal ::=
	 __c_single_quote ( [^'\$]+ | escape_sequence | string_interpolation )* __single_quote
	| __c_double_quote ( [^"\$]+ | escape_sequence | string_interpolation )* __double_quote

raw_string_literal ::=
	 __r_single_quote [^'\]+* __single_quote
	| __r_double_quote [^"\]+* __double_quote

interpreted_string_literal ::=
	 __single_quote ( [^'\$]+ | escape_sequence | string_interpolation )* __single_quote
	| __double_quote ( [^"\$]+ | escape_sequence | string_interpolation )* __double_quote

string_interpolation ::=
	 __dolcbr _expression format_specifier? __rcbr

format_specifier ::=
	 ':' ( [bgGeEfFcdoxXpsS] | ( [+#x2D-] | '0' )? int_literal? ( '.' int_literal )? [bgGeEfFcdoxXpsS]? )

pseudo_compile_time_identifier ::=
	 '@' [A-Z][A-Z0-9_]+

identifier ::=
	 ( '@'? '$'? 'C.'? 'JS.'? ( [a-zA-Zα-ωΑ-Ωµ] | '_' ) ( [a-zA-Zα-ωΑ-Ωµ] | '_' | [0-9] )* )

visibility_modifiers ::=
	 'pub' | '__global'

mutability_modifiers ::=
	 'mut' 'static'? 'volatile'? | 'shared'

mutable_identifier ::=
	 mutability_modifiers identifier

mutable_expression ::=
	 mutability_modifiers _expression

identifier_list ::=
	 ( mutable_identifier | identifier ) ( ',' ( mutable_identifier | identifier ) )*

expression_list ::=
	 ( _expression | mutable_expression ) ( ',' ( _expression | mutable_expression ) )*

expression_without_blocks_list ::=
	 _expression_without_blocks ( ',' _expression_without_blocks )*

plain_type ::=
	 _plain_type_without_special | option_type | result_type | multi_return_type

_plain_type_without_special ::=
	 type_reference_expression | qualified_type | pointer_type | wrong_pointer_type | array_type | fixed_array_type | function_type | generic_type | map_type | channel_type | shared_type | thread_type | atomic_type | anon_struct_type

anon_struct_type ::=
	 'struct' _struct_body

multi_return_type ::=
	 '(' plain_type ( ',' plain_type )* ','? ')'

result_type ::=
	 '!' plain_type?

option_type ::=
	 '?' plain_type?

qualified_type ::=
	 reference_expression '.' type_reference_expression

fixed_array_type ::=
	 '[' ( int_literal | reference_expression | selector_expression ) ']' plain_type

array_type ::=
	 '[' ']' plain_type

variadic_type ::=
	 '...' plain_type

pointer_type ::=
	 '&' plain_type

wrong_pointer_type ::=
	 '*' plain_type

map_type ::=
	 'map[' plain_type ']' plain_type

channel_type ::=
	 'chan' plain_type

shared_type ::=
	 'shared' plain_type

thread_type ::=
	 'thread' plain_type

atomic_type ::=
	 'atomic' plain_type

generic_type ::=
	 ( qualified_type | type_reference_expression ) type_parameters

function_type ::=
	 'fn' signature

_statement_list ::=
	 _statement ( ( terminator ) _statement )* ( ( terminator ) empty_labeled_statement? )?
	| empty_labeled_statement

_statement ::=
	 simple_statement
	| assert_statement
	| continue_statement
	| break_statement
	| return_statement
	| asm_statement
	| goto_statement
	| labeled_statement
	| defer_statement
	| for_statement
	| compile_time_for_statement
	| send_statement
	| block
	| hash_statement
	| append_statement

simple_statement ::=
	 var_declaration
	| _expression
	| assignment_statement
	| strictly_expression_list

assert_statement ::=
	 'assert' _expression

append_statement ::=
	 _expression '<<' _expression

send_statement ::=
	 _expression '<-' _expression

var_declaration ::=
	 expression_list ':=' expression_list

var_definition_list ::=
	 var_definition ( ',' var_definition )*

var_definition ::=
	 'mut'? identifier

assignment_statement ::=
	 expression_list ( '*=' | '/=' | '%=' | '<<=' | '>>=' | '>>>=' | '&=' | '&^=' | '+=' | '-=' | '|=' | '^=' | '=' ) expression_list

block ::=
	 '{' _statement_list? '}'

defer_statement ::=
	 'defer' block

label_reference ::=
	 identifier

goto_statement ::=
	 'goto' label_reference

break_statement ::=
	 'break' label_reference?

continue_statement ::=
	 'continue' label_reference?

return_statement ::=
	 'return' expression_list?

label_definition ::=
	 identifier ':'

labeled_statement ::=
	 label_definition _statement

empty_labeled_statement ::=
	 label_definition

compile_time_for_statement ::=
	 '$for' range_clause block

for_statement ::=
	 'for' ( range_clause | for_clause | _expression )? block

range_clause ::=
	 var_definition_list 'in' ( _definite_range | _expression )

for_clause ::=
	 simple_statement? ';' _expression? ';' simple_statement?

_definite_range ::=
	 _expression ( '..' | '...' ) _expression

range ::=
	 _expression? '..' _expression?

hash_statement ::=
	 '#' [^\#x0D#x0A]+

asm_statement ::=
	 'asm' identifier _content_block

_content_block ::=
	 '{' [^{}]+ '}'

attributes ::=
	 ( attribute ( terminator )? )+

attribute ::=
	 ( '[' | '@[' ) attribute_expression ( ';' attribute_expression )* ']'

attribute_expression ::=
	 if_attribute | _plain_attribute

if_attribute ::=
	 'if' reference_expression '?'?

_plain_attribute ::=
	 literal_attribute
	| value_attribute
	| key_value_attribute

literal_attribute ::=
	 literal

value_attribute ::=
	 ( 'unsafe' | reference_expression )

key_value_attribute ::=
	 value_attribute ':' ( literal | identifier )

__dolcbr ::=
	 '${'

__rcbr ::=
	 '}'

__double_quote ::=
	 '"' 

__single_quote ::=
	 "'" 

__c_double_quote ::=
	 'c"'

__c_single_quote ::=
	 "c'"

__r_double_quote ::=
	 'r"'

__r_single_quote ::=
	 "r'"
